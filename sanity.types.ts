/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ShareSection = {
  _type: "shareSection";
  label?: string;
  shareData?: ShareData;
};

export type ShareData = {
  _type: "shareData";
  title?: string;
  text?: string;
  url?: string;
};

export type Tags = {
  _type: "tags";
  ariaLabel?: string;
  title?: string;
  as?: "tags" | "chips";
  forPreview?: "previewOnly" | "pageOnly" | "both";
  tags?: Array<{
    _key: string;
  } & Tag>;
};

export type Tag = {
  _type: "tag";
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "route";
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
  } & EmbedHTML>;
  media?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  route?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  };
  link?: string;
};

export type Social = {
  _type: "social";
  title?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "socialTypes";
  };
  link?: string;
};

export type ContentPreview = {
  _type: "contentPreview";
  label?: string;
  heading?: string;
  parentRoute?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  };
  query?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "dataQuery";
  };
  params?: Array<{
    _key: string;
  } & KeyValue>;
};

export type TextSection = {
  _type: "textSection";
  label?: string;
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      _key: string;
    } & Link | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "route";
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "figure";
    _key: string;
  } | {
    _key: string;
  } & EmbedHTML | {
    _key: string;
  } & Code>;
};

export type SimplePortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    _key: string;
  } & Link | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & EmbedHTML>;

export type PortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    _key: string;
  } & Link | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  alt?: string;
  _type: "figure";
  _key: string;
} | {
  _key: string;
} & EmbedHTML | {
  _key: string;
} & Code>;

export type Parameter = {
  _type: "parameter";
  key?: string;
  optional?: boolean;
};

export type Link = {
  _type: "link";
  href?: string;
};

export type KeyValue = {
  _type: "keyValue";
  key?: string;
  value?: string;
};

export type InternalLink = {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "page";
} | {
  _ref: string;
  _type: "reference";
  _weak?: boolean;
  [internalGroqTypeReferenceTo]?: "route";
};

export type ImageSection = {
  _type: "imageSection";
  heading?: string;
  label?: string;
  text?: SimplePortableText;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "figure";
  };
  cta?: Cta;
};

export type Hero = {
  _type: "hero";
  heading?: string;
  subHeading?: string;
  tagline?: SimplePortableText;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "figure";
  };
  ctas?: Array<{
    _key: string;
  } & Cta>;
};

export type EmbedHTML = {
  _type: "embedHTML";
  html?: string;
};

export type Cards = {
  _type: "cards";
  label?: string;
  heading?: string;
  cards?: Array<{
    _key: string;
  } & Card>;
};

export type Card = {
  _type: "card";
  title?: string;
  text?: SimplePortableText;
  fromColor?: "from-blue-700" | "from-yellow-700" | "from-pink-700" | "from-green-700" | "from-purple-700" | "from-red-700";
  toColor?: "to-blue-500" | "to-yellow-500" | "to-pink-500" | "to-green-500" | "to-purple-500" | "to-red-500";
  cta?: Cta;
  enabled?: boolean;
};

export type Cta = {
  _type: "cta";
  title?: string;
  route?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  };
  link?: string;
};

export type Banner = {
  _type: "banner";
  heading?: string;
  subHeading?: string;
  ctas?: Array<{
    _key: string;
  } & Cta>;
};

export type SocialTypes = {
  _id: string;
  _type: "socialTypes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  svg?: string;
};

export type Theme = {
  _id: string;
  _type: "theme";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  primary?: Color;
  primaryText?: Color;
  primaryLight?: Color;
  primaryLightText?: Color;
  primaryDark?: Color;
  primaryDarkText?: Color;
  secondary?: Color;
  secondaryText?: Color;
  secondaryLight?: Color;
  secondaryLightText?: Color;
  secondaryDark?: Color;
  secondaryDarkText?: Color;
  background?: Color;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  url?: string;
  frontpage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  lang?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "figure";
  };
  mainNavigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "route";
  }>;
  footerNavigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "route";
  }>;
  footerText?: SimplePortableText;
  pageQuery?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "dataQuery";
  };
  subPageQuery?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "dataQuery";
  };
  siteSettingsQuery?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "dataQuery";
  };
  themes?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "theme";
  }>;
  social?: Array<{
    _key: string;
  } & Social>;
};

export type Figure = {
  _type: "figure";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  alt?: string;
};

export type DataQuery = {
  _id: string;
  _type: "dataQuery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  queryCode?: Code;
  queryParams?: Array<{
    _key: string;
  } & Parameter>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  parentRoute?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "route";
  };
  slug?: Slug;
  path?: string;
  content?: Array<{
    _key: string;
  } & Hero | {
    _key: string;
  } & Banner | {
    _key: string;
  } & Cards | {
    _key: string;
  } & ImageSection | {
    _key: string;
  } & TextSection | {
    _key: string;
  } & ContentPreview | {
    _key: string;
  } & Tags | {
    _key: string;
  } & ShareSection>;
  description?: PortableText;
  openGraphImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  statusDate?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Route = {
  _id: string;
  _type: "route";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug?: Slug;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  includeInSitemap?: boolean;
  disallowRobots?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | ShareSection | ShareData | Tags | Tag | Social | ContentPreview | TextSection | SimplePortableText | PortableText | Parameter | Link | KeyValue | InternalLink | ImageSection | Hero | EmbedHTML | Cards | Card | Cta | Banner | SocialTypes | Theme | SiteSettings | Figure | DataQuery | Page | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Route | Slug | Color | RgbaColor | HsvaColor | HslaColor | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
